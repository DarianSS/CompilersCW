import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }

  }

  public void syntax_error(Symbol current_token) { report_error(
         "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + "\n", null);
  } 

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal INT, RAT, FLOAT, BOOL, CHAR, EQ, SEMICOLON, TOP, 
         PLUS, MINUS, MULT, DIV, POW, INTEGER_LITERAL, FLOAT_LITERAL;
terminal SEQ, DICT;
terminal IDENTIFIER;
terminal LPAREN, RPAREN;
terminal BOOLEAN_LITERAL;
terminal COLON;
terminal STRING;
terminal ANDAND, OROR, CONCAT;
terminal READ;
terminal LBRACE, RBRACE;
terminal RBRACK, LBRACK;
terminal LT, RT;
terminal TDEF, FDEF;
terminal IF, THEN, ELSE, ELIF, FI;
terminal DO, OD;
terminal WHILE;
terminal FORALL, IN;
terminal BADCHAR;
terminal COMMA, DOT; 
terminal AND, OR, NOT;
terminal NOTEQ, EQEQ, LTEQ, GTEQ;
terminal RETURN;
terminal NULL_LITERAL, VOID, ALIAS;
terminal UNDERSCORE;

nonterminal statements, statement, top_level;
nonterminal declaration, full_exp, simple_exp, operator;
nonterminal numeric_operator, unary_bool_operator, 
            binary_bool_operator, boolean_operator, 
            bool_comp_operator, num_comp_operator; 
nonterminal dict_operator;
nonterminal pos_number, number, integer;
nonterminal if_statement, if_elif_statement,
            elif_body, elif_segment;
nonterminal prim_type, agg_type, spec_type;
nonterminal while_statement;
nonterminal forall_statement;
nonterminal type, binary_operator;

precedence left PLUS, MINUS;
precedence left DIV, MULT;

top_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);
              :}
            ;

statements ::= statements:ss statement:s {:
                  Node n = (Node)ss;
                  n.addChild((Node)s);
                  RESULT = n;
               :}
             | /* empty */ {:
                  RESULT = new Node("Statements");
               :}
             ;

statement ::= full_exp:s {: RESULT = (Node)s; :}
            | if_statement
            | if_elif_statement
            | while_statement
            | forall_statement
            | declaration
            ;

full_exp ::= simple_exp:e SEMICOLON {: RESULT = (Node)e; :};

simple_exp ::= number:i    {: RESULT = new Node(i); :}
             | IDENTIFIER:i {: RESULT = new Node(i); :}
             | simple_exp:e1 binary_operator:o simple_exp:e2 {:
                  Node n = (Node)o;
                  n.addChild((Node)e1);
                  n.addChild((Node)e2);
                  RESULT = n;
               :}
             | LPAREN simple_exp:e RPAREN {:
                 Node n = new Node("parens");
                 n.addChild(new Node("("));
                 n.addChild((Node)e);
                 n.addChild(new Node(")"));
                 RESULT = (Node)e;
               :}
             | STRING
             | CHAR
             ;

declaration ::= prim_type IDENTIFIER:i EQ full_exp:e {:
               Node n = new Node("IDENT");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             :}
              | prim_type IDENTIFIER:i SEMICOLON {: 
               Node n = new Node("IDENT");
               n.addChild(new Node(i));
               RESULT = n;
             :}
             ;

//operators are done - not really

binary_operator ::= binary_bool_operator
                  | num_comp_operator
                  ;

numeric_operator ::= PLUS  {: RESULT = new Node("+"); :}
           | MINUS {: RESULT = new Node("-"); :}
           | MULT  {: RESULT = new Node("*"); :}
           | DIV   {: RESULT = new Node("/"); :}
           | POW   {: RESULT = new Node("^"); :}
           ;

unary_bool_operator ::= NOT {: RESULT = new Node("!"); :};

binary_bool_operator ::= AND {: RESULT = new Node("&&"); :}
                       | OR {: RESULT = new Node("||"); :}
                      ;

boolean_operator ::= unary_bool_operator
                    | binary_bool_operator
                    ;

bool_comp_operator ::= EQEQ {: RESULT = new Node("=="); :}
                    | NOTEQ {: RESULT = new Node("!="); :}
                    ;

num_comp_operator ::= LT {: RESULT = new Node("<"); :}
                    | LTEQ {: RESULT = new Node("<="); :}
                    | GTEQ {: RESULT = new Node(">="); :}
                    | RT {: RESULT = new Node(">"); :}
                    ;

dict_operator ::= IDENTIFIER IN IDENTIFIER
                ;

elif_segment ::= ELIF LPAREN simple_exp RPAREN THEN statements
               ;

elif_body ::= elif_segment
            | elif_segment elif_body
            ;

if_statement ::= IF LPAREN simple_exp RPAREN THEN statements FI
              | IF LPAREN simple_exp RPAREN THEN statements 
                  ELSE statements FI
              ;

if_elif_statement ::= IF LPAREN simple_exp RPAREN THEN statements
                        elif_body FI
                    | IF LPAREN simple_exp RPAREN THEN statements
                        elif_body ELSE statements FI
                    ;

while_statement ::= WHILE LPAREN simple_exp RPAREN DO statements OD
                  ;

forall_statement ::= FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN
                      DO statements OD
                   ;

prim_type ::= INT
        | FLOAT
        | RAT
        | BOOL
        | CHAR
        ;

agg_type ::= SEQ LT spec_type RT
        | DICT LT spec_type COMMA spec_type RT
        ;

spec_type ::= prim_type
            | agg_type
            | TOP
            ;

number ::= pos_number:no               //{: RESULT = new Node(no); :}
         | MINUS pos_number:no         //{: RESULT = new Node(-no); :}
         ;

pos_number ::= INTEGER_LITERAL:i          
         | FLOAT_LITERAL:f               
         | INTEGER_LITERAL:i UNDERSCORE INTEGER_LITERAL DIV INTEGER_LITERAL {: :}
         | INTEGER_LITERAL DIV INTEGER_LITERAL {: :}
         ;
