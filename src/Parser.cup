import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  public int i = 0;

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;   
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }

  }

  public void syntax_error(Symbol current_token) { report_error(
         "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + "\n", null);
  } 

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal INT, RAT, FLOAT, BOOL, CHAR, EQ, SEMICOLON, TOP, 
         PLUS, MINUS, MULT, DIV, POW, INTEGER_LITERAL, FLOAT_LITERAL;
terminal MAIN;
terminal SEQ, DICT;
terminal IDENTIFIER;
terminal LPAREN, RPAREN;
terminal BOOLEAN_LITERAL;
terminal COLON;
terminal STRING;
terminal ANDAND, OROR;
terminal READ, PRINT;
terminal LBRACE, RBRACE;
terminal RBRACK, LBRACK;
terminal LT, GT;
terminal TDEF, FDEF;
terminal IF, THEN, ELSE, ELIF, FI;
terminal DO, OD;
terminal WHILE;
terminal FORALL, IN;
terminal COMMA, DOT; 
terminal NOT;
terminal NOTEQ, EQEQ, LTEQ, GTEQ;
terminal RETURN;
terminal NULL_LITERAL, VOID, ALIAS;
terminal UNDERSCORE;

nonterminal statements, statement, top_level;
nonterminal declaration, full_exp, simple_exp, operator;
nonterminal seq_declaration;
nonterminal dict_declaration, dict_dec_list;
nonterminal arithmetic_operator, logic_operator, logic_unary_operator;
nonterminal pos_number, number;
nonterminal if_statement, if_elif_statement,
            elif_body, elif_segment;
nonterminal prim_type, agg_type, spec_type;
nonterminal while_statement;
nonterminal forall_statement;
nonterminal declaration_list, declaration_list_item;
nonterminal alias, tdef;
nonterminal fdef, formal_parameter_list, formal_parameter_list_item, fdef_type;
nonterminal array_access;
nonterminal main;
nonterminal function_call, return_statement;
nonterminal array_list, array_list_items;
nonterminal parameters;
nonterminal tdef_list,tdef_helper;
nonterminal dot_access;
nonterminal array_access_index, array_access_index_list;

precedence nonassoc ANDAND, OROR, NOT, EQEQ, NOTEQ, LT, LTEQ, GT, GTEQ, COLON, IN;
precedence left PLUS, MINUS;
precedence left DIV, MULT, POW;


top_level ::= statements main statements;

statements ::= statements statement
             | /* empty */ ;

statement ::= full_exp
            | if_statement
            | if_elif_statement
            | while_statement
            | forall_statement
            | declaration
            | tdef
            | fdef
            | alias
            | return_statement
            | READ IDENTIFIER SEMICOLON
            | PRINT full_exp;

full_exp ::= simple_exp SEMICOLON;

simple_exp ::= //array_list_item
             number
             | STRING
             | IDENTIFIER
             //simple_exp_value
             | array_access
             | array_list
             | CHAR
             | simple_exp operator simple_exp
             | LPAREN simple_exp RPAREN
             | function_call
             | logic_unary_operator simple_exp
             | BOOLEAN_LITERAL
             | dot_access
             | NULL_LITERAL
             ;

declaration ::= prim_type IDENTIFIER EQ full_exp
              | prim_type IDENTIFIER SEMICOLON
              | prim_type IDENTIFIER EQ tdef_list tdef_helper SEMICOLON //for tdef declarations
              | IDENTIFIER EQ full_exp
              | seq_declaration
              | dot_access EQ full_exp
              | dict_declaration;

dot_access ::= IDENTIFIER DOT IDENTIFIER;

tdef_helper ::= simple_exp ;// | array_list;

tdef_list ::= tdef_list tdef_helper COMMA
            | tdef_helper COMMA; 

seq_declaration ::= SEQ LT spec_type GT IDENTIFIER SEMICOLON
                  | SEQ LT spec_type GT IDENTIFIER EQ simple_exp SEMICOLON
                  | SEQ LT spec_type GT IDENTIFIER EQ LBRACK RBRACK SEMICOLON
                  | SEQ LT spec_type GT IDENTIFIER EQ simple_exp COLON COLON simple_exp SEMICOLON;


dict_declaration ::= DICT LT spec_type COMMA spec_type GT IDENTIFIER SEMICOLON
                   | DICT LT spec_type COMMA spec_type GT IDENTIFIER EQ LBRACE dict_dec_list RBRACE SEMICOLON
                   | DICT LT spec_type COMMA spec_type GT IDENTIFIER EQ simple_exp SEMICOLON;

dict_dec_list ::= simple_exp COLON simple_exp COMMA dict_dec_list
                | simple_exp COLON simple_exp
                | /*empty*/;                    

arithmetic_operator ::= PLUS  
                   | MINUS 
                   | MULT  
                   | DIV   
                   | POW;

logic_operator ::= ANDAND 
                 | OROR
                 | EQEQ
                 | NOTEQ
                 | LT
                 | LTEQ
                 | GTEQ 
                 | GT;

logic_unary_operator ::= NOT;

operator ::= arithmetic_operator
           | logic_operator
           | COLON COLON 
           | IN;

elif_segment ::= ELIF LPAREN simple_exp RPAREN THEN statements;

elif_body ::= elif_segment
            | elif_segment elif_body;

if_statement ::= IF LPAREN simple_exp RPAREN THEN statements FI
               | IF LPAREN simple_exp RPAREN THEN statements ELSE statements FI;

if_elif_statement ::= IF LPAREN simple_exp RPAREN THEN statements elif_body FI
                    | IF LPAREN simple_exp RPAREN THEN statements elif_body ELSE statements FI;

while_statement ::= WHILE LPAREN simple_exp RPAREN DO statements OD;

forall_statement ::= FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN DO statements OD;

prim_type ::= INT
            | FLOAT
            | RAT
            | BOOL
            | CHAR
            | IDENTIFIER;

agg_type ::= SEQ LT spec_type GT
           | DICT LT spec_type COMMA spec_type GT;

spec_type ::= prim_type
            | agg_type
            | TOP;

declaration_list ::= declaration_list COMMA declaration_list_item
                   | declaration_list_item;

declaration_list_item ::= prim_type IDENTIFIER
                        | agg_type IDENTIFIER;

alias ::= ALIAS spec_type IDENTIFIER SEMICOLON;

tdef ::= TDEF IDENTIFIER LBRACE declaration_list RBRACE SEMICOLON;

fdef ::= FDEF fdef_type IDENTIFIER LPAREN formal_parameter_list RPAREN LBRACE statements RBRACE SEMICOLON
        | FDEF fdef_type IDENTIFIER LPAREN RPAREN LBRACE statements RBRACE SEMICOLON;

fdef_type ::= prim_type
            | agg_type
            | VOID
            ;

formal_parameter_list ::= formal_parameter_list COMMA formal_parameter_list_item
                        | formal_parameter_list_item;

formal_parameter_list_item ::= prim_type IDENTIFIER
                             | agg_type IDENTIFIER;

array_list ::= LBRACK array_list_items RBRACK;

array_list_items ::= simple_exp COMMA array_list_items
                    | simple_exp
                    ;

function_call ::= IDENTIFIER LPAREN simple_exp parameters RPAREN
              | IDENTIFIER LPAREN RPAREN; //for no parameters

parameters ::= parameters COMMA simple_exp
              | ;
//

return_statement ::= RETURN full_exp
                    | RETURN SEMICOLON
                    ;

array_access ::= IDENTIFIER array_access_index array_access_index_list ;

array_access_index ::= LBRACK simple_exp RBRACK
                    | LBRACK simple_exp COLON simple_exp RBRACK
                    | LBRACK COLON simple_exp RBRACK
                    | LBRACK simple_exp COLON RBRACK
                    ;

array_access_index_list ::= array_access_index_list array_access_index
                          | 
                          ;

//we should declare a numerical_exp so that we dont have cases like IDENTIFIER['c':'d']

main ::= MAIN LBRACE statement statements RBRACE SEMICOLON;

number ::= pos_number           
         | MINUS pos_number;

pos_number ::= INTEGER_LITERAL         
             | FLOAT_LITERAL               
             | INTEGER_LITERAL UNDERSCORE INTEGER_LITERAL DIV INTEGER_LITERAL
             | INTEGER_LITERAL DIV INTEGER_LITERAL;