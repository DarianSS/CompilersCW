
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\004\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\006\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\005\000\002\005\006\000\002\005\005" +
    "\000\002\005\012\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\010\003\000" +
    "\002\010\003\000\002\014\005\000\002\022\010\000\002" +
    "\021\003\000\002\021\004\000\002\017\011\000\002\017" +
    "\013\000\002\020\012\000\002\020\014\000\002\026\011" +
    "\000\002\027\013\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\006\000\002\024\010\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\016\003\000\002\016\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\007\000" +
    "\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\042\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\025\ufffe" +
    "\026\ufffe\032\ufffe\047\ufffe\056\ufffe\057\ufffe\001\002\000" +
    "\042\002\001\004\013\005\033\006\030\007\037\010\017" +
    "\015\034\021\035\022\040\023\032\025\022\026\025\032" +
    "\027\047\024\056\016\057\012\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\052\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\015\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\025\ufff8\026\ufff8\032\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002" +
    "\000\040\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\027\uffc9\043\uffc9\044\uffc9\064\uffc9\065\uffc9\067\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\001\002\000\052\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\015\uffff\021\uffff" +
    "\022\uffff\023\uffff\025\uffff\026\uffff\032\uffff\047\uffff\051" +
    "\uffff\052\uffff\053\uffff\055\uffff\056\uffff\057\uffff\001\002" +
    "\000\004\026\144\001\002\000\004\025\uffd3\001\002\000" +
    "\052\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\015\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc\032" +
    "\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\001\002\000\004\025\140\001\002\000\004\026" +
    "\132\001\002\000\040\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\025\uffcf\043\ufff3\044\ufff3\064\ufff3\065" +
    "\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002\000\052" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\015" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\032\ufffa" +
    "\047\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\001\002\000\052\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\015\ufffd\021\ufffd\022\ufffd\023\ufffd\025" +
    "\ufffd\026\ufffd\032\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\001\002\000\040\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\027\ufff5\043\ufff5" +
    "\044\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\001\002\000\052\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\015\ufff9\021\ufff9\022\ufff9\023\ufff9\025" +
    "\ufff9\026\ufff9\032\ufff9\047\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\001\002\000\004\026\104\001" +
    "\002\000\020\010\063\015\034\021\035\022\040\025\022" +
    "\026\025\032\027\001\002\000\052\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\015\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\025\ufffb\026\ufffb\032\ufffb\047\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\001\002\000\040" +
    "\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\027" +
    "\ufff4\043\ufff4\044\ufff4\064\ufff4\065\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\001\002\000\004\025\uffd2\001\002\000" +
    "\040\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\027\ufff6\043\ufff6\044\ufff6\064\ufff6\065\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\001\002\000\004\043\073\001\002" +
    "\000\004\025\uffd1\001\002\000\006\021\035\022\040\001" +
    "\002\000\042\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\065" +
    "\020\uffc7\027\uffc7\043\uffc7\044\uffc7\064\uffc7\065\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\077\064\001\002\000\036" +
    "\012\056\014\052\015\041\016\050\017\053\020\045\043" +
    "\057\044\054\064\042\065\061\067\051\070\043\071\060" +
    "\072\047\001\002\000\004\025\uffd0\001\002\000\040\012" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\027\uffc6" +
    "\043\uffc6\044\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\001\002\000\020\010\uffec\015\uffec\021\uffec" +
    "\022\uffec\025\uffec\026\uffec\032\uffec\001\002\000\020\010" +
    "\uffe8\015\uffe8\021\uffe8\022\uffe8\025\uffe8\026\uffe8\032\uffe8" +
    "\001\002\000\020\010\uffe6\015\uffe6\021\uffe6\022\uffe6\025" +
    "\uffe6\026\uffe6\032\uffe6\001\002\000\020\010\uffdf\015\uffdf" +
    "\021\uffdf\022\uffdf\025\uffdf\026\uffdf\032\uffdf\001\002\000" +
    "\020\010\uffe9\015\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9" +
    "\032\uffe9\001\002\000\020\010\063\015\034\021\035\022" +
    "\040\025\022\026\025\032\027\001\002\000\020\010\uffe2" +
    "\015\uffe2\021\uffe2\022\uffe2\025\uffe2\026\uffe2\032\uffe2\001" +
    "\002\000\020\010\uffeb\015\uffeb\021\uffeb\022\uffeb\025\uffeb" +
    "\026\uffeb\032\uffeb\001\002\000\020\010\uffe5\015\uffe5\021" +
    "\uffe5\022\uffe5\025\uffe5\026\uffe5\032\uffe5\001\002\000\020" +
    "\010\uffed\015\uffed\021\uffed\022\uffed\025\uffed\026\uffed\032" +
    "\uffed\001\002\000\020\010\uffea\015\uffea\021\uffea\022\uffea" +
    "\025\uffea\026\uffea\032\uffea\001\002\000\020\010\uffe1\015" +
    "\uffe1\021\uffe1\022\uffe1\025\uffe1\026\uffe1\032\uffe1\001\002" +
    "\000\020\010\uffde\015\uffde\021\uffde\022\uffde\025\uffde\026" +
    "\uffde\032\uffde\001\002\000\052\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\015\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\025\ufff7\026\ufff7\032\ufff7\047\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\020\010" +
    "\uffe4\015\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\032\uffe4" +
    "\001\002\000\020\010\uffe3\015\uffe3\021\uffe3\022\uffe3\025" +
    "\uffe3\026\uffe3\032\uffe3\001\002\000\020\010\uffe7\015\uffe7" +
    "\021\uffe7\022\uffe7\025\uffe7\026\uffe7\032\uffe7\001\002\000" +
    "\040\012\ufff2\014\052\015\041\016\050\017\053\020\045" +
    "\027\ufff2\043\057\044\054\064\042\065\061\067\051\070" +
    "\043\071\060\072\047\001\002\000\040\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\027\ufff3\043\ufff3\044" +
    "\ufff3\064\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\001\002\000\004\021\067\001\002\000\004\021\066\001" +
    "\002\000\040\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\027\uffc4\043\uffc4\044\uffc4\064\uffc4\065\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\001\002\000\004\017\070" +
    "\001\002\000\004\021\071\001\002\000\040\012\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\027\uffc5\043\uffc5" +
    "\044\uffc5\064\uffc5\065\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\001\002\000\040\012\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\027\uffc8\043\uffc8\044\uffc8\064\uffc8\065" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\001\002\000\004" +
    "\010\074\001\002\000\004\044\075\001\002\000\004\025" +
    "\076\001\002\000\004\011\077\001\002\000\004\032\100" +
    "\001\002\000\004\012\101\001\002\000\052\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\015\uffee\021\uffee" +
    "\022\uffee\023\uffee\025\uffee\026\uffee\032\uffee\047\uffee\051" +
    "\uffee\052\uffee\053\uffee\055\uffee\056\uffee\057\uffee\001\002" +
    "\000\036\014\052\015\041\016\050\017\053\020\045\027" +
    "\103\043\057\044\054\064\042\065\061\067\051\070\043" +
    "\071\060\072\047\001\002\000\040\012\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\027\ufff1\043\ufff1\044\ufff1" +
    "\064\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\001" +
    "\002\000\020\010\063\015\034\021\035\022\040\025\022" +
    "\026\025\032\027\001\002\000\036\014\052\015\041\016" +
    "\050\017\053\020\045\027\106\043\057\044\054\064\042" +
    "\065\061\067\051\070\043\071\060\072\047\001\002\000" +
    "\004\050\107\001\002\000\046\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\025" +
    "\ufffe\026\ufffe\032\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\056\ufffe\057\ufffe\001\002\000\046\004\013\005\033\006" +
    "\030\007\037\010\017\015\034\021\035\022\040\023\032" +
    "\025\022\026\025\032\027\047\024\051\111\052\114\053" +
    "\112\056\016\057\012\001\002\000\042\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\015\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\025\ufffe\026\ufffe\032\ufffe\047\ufffe\053\ufffe\056\ufffe" +
    "\057\ufffe\001\002\000\052\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\015\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\025\uffd9\026\uffd9\032\uffd9\047\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000\010\051\uffdb" +
    "\052\114\053\uffdb\001\002\000\004\026\122\001\002\000" +
    "\006\051\117\053\116\001\002\000\052\002\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\015\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\025\uffd7\026\uffd7\032\uffd7\047\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000" +
    "\042\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\015\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\025\ufffe\026\ufffe\032\ufffe\047" +
    "\ufffe\053\ufffe\056\ufffe\057\ufffe\001\002\000\042\004\013" +
    "\005\033\006\030\007\037\010\017\015\034\021\035\022" +
    "\040\023\032\025\022\026\025\032\027\047\024\053\121" +
    "\056\016\057\012\001\002\000\052\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\015\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\025\uffd6\026\uffd6\032\uffd6\047\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002\000\020" +
    "\010\063\015\034\021\035\022\040\025\022\026\025\032" +
    "\027\001\002\000\036\014\052\015\041\016\050\017\053" +
    "\020\045\027\124\043\057\044\054\064\042\065\061\067" +
    "\051\070\043\071\060\072\047\001\002\000\004\050\125" +
    "\001\002\000\046\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\025\ufffe\026\ufffe" +
    "\032\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\056\ufffe\057" +
    "\ufffe\001\002\000\046\004\013\005\033\006\030\007\037" +
    "\010\017\015\034\021\035\022\040\023\032\025\022\026" +
    "\025\032\027\047\024\051\uffdc\052\uffdc\053\uffdc\056\016" +
    "\057\012\001\002\000\006\051\uffda\053\uffda\001\002\000" +
    "\042\004\013\005\033\006\030\007\037\010\017\015\034" +
    "\021\035\022\040\023\032\025\022\026\025\032\027\047" +
    "\024\053\131\056\016\057\012\001\002\000\052\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\015\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\032\uffd8\047\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\001" +
    "\002\000\020\010\063\015\034\021\035\022\040\025\022" +
    "\026\025\032\027\001\002\000\036\014\052\015\041\016" +
    "\050\017\053\020\045\027\134\043\057\044\054\064\042" +
    "\065\061\067\051\070\043\071\060\072\047\001\002\000" +
    "\004\054\135\001\002\000\042\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\025" +
    "\ufffe\026\ufffe\032\ufffe\047\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\001\002\000\042\004\013\005\033\006\030\007\037\010" +
    "\017\015\034\021\035\022\040\023\032\025\022\026\025" +
    "\032\027\047\024\055\137\056\016\057\012\001\002\000" +
    "\052\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\015\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\032" +
    "\uffd5\047\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\001\002\000\006\011\141\012\142\001\002\000" +
    "\020\010\063\015\034\021\035\022\040\025\022\026\025" +
    "\032\027\001\002\000\052\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\015\uffef\021\uffef\022\uffef\023\uffef" +
    "\025\uffef\026\uffef\032\uffef\047\uffef\051\uffef\052\uffef\053" +
    "\uffef\055\uffef\056\uffef\057\uffef\001\002\000\052\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\015\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\032\ufff0\047\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\057\ufff0\001" +
    "\002\000\004\025\145\001\002\000\004\060\146\001\002" +
    "\000\004\025\147\001\002\000\004\027\150\001\002\000" +
    "\004\054\151\001\002\000\042\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\025" +
    "\ufffe\026\ufffe\032\ufffe\047\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\001\002\000\042\004\013\005\033\006\030\007\037\010" +
    "\017\015\034\021\035\022\040\023\032\025\022\026\025" +
    "\032\027\047\024\055\153\056\016\057\012\001\002\000" +
    "\052\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\015\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\032" +
    "\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\006\002\003\004\004\001\001\000\030\003" +
    "\010\005\006\006\020\007\035\015\007\016\030\017\013" +
    "\020\025\023\014\026\017\027\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\101" +
    "\015\007\016\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\071\001\001\000\002\001" +
    "\001\000\010\010\045\011\043\012\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\061\015\007\016\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\045\011\043\012\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\045\011\043" +
    "\012\054\001\001\000\002\001\001\000\010\007\104\015" +
    "\007\016\030\001\001\000\010\010\045\011\043\012\054" +
    "\001\001\000\002\001\001\000\004\002\107\001\001\000" +
    "\034\003\010\005\006\006\020\007\035\015\007\016\030" +
    "\017\013\020\025\021\114\022\112\023\014\026\017\027" +
    "\022\001\001\000\004\002\127\001\001\000\002\001\001" +
    "\000\006\021\126\022\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\117\001\001" +
    "\000\030\003\010\005\006\006\020\007\035\015\007\016" +
    "\030\017\013\020\025\023\014\026\017\027\022\001\001" +
    "\000\002\001\001\000\010\007\122\015\007\016\030\001" +
    "\001\000\010\010\045\011\043\012\054\001\001\000\002" +
    "\001\001\000\004\002\125\001\001\000\030\003\010\005" +
    "\006\006\020\007\035\015\007\016\030\017\013\020\025" +
    "\023\014\026\017\027\022\001\001\000\002\001\001\000" +
    "\030\003\010\005\006\006\020\007\035\015\007\016\030" +
    "\017\013\020\025\023\014\026\017\027\022\001\001\000" +
    "\002\001\001\000\010\007\132\015\007\016\030\001\001" +
    "\000\010\010\045\011\043\012\054\001\001\000\002\001" +
    "\001\000\004\002\135\001\001\000\030\003\010\005\006" +
    "\006\020\007\035\015\007\016\030\017\013\020\025\023" +
    "\014\026\017\027\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\142\007\035\015\007\016\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\151\001\001\000\030\003\010" +
    "\005\006\006\020\007\035\015\007\016\030\017\013\020" +
    "\025\023\014\026\017\027\022\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }

  }

  public void syntax_error(Symbol current_token) { report_error(
         "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + "\n", null);
  } 

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // top_level ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("top_level",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= top_level EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= full_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if_elif_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= forall_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // full_exp ::= simple_exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_exp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_exp ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_exp ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_exp ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_exp ::= simple_exp operator simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= prim_type IDENTIFIER EQ full_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= prim_type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= SEQ LT CHAR GT IDENTIFIER EQ STRING SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmetic_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithmetic_operator ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logic_operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logic_operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logic_operator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logic_operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logic_operator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logic_operator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logic_operator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logic_operator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logic_unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_unary_operator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operator ::= arithmetic_operator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operator ::= logic_operator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dict_operator ::= IDENTIFIER IN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elif_segment ::= ELIF LPAREN simple_exp RPAREN THEN statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_segment",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elif_body ::= elif_segment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_body",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elif_body ::= elif_segment elif_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_body",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_statement ::= IF LPAREN simple_exp RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_statement ::= IF LPAREN simple_exp RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_elif_statement ::= IF LPAREN simple_exp RPAREN THEN statements elif_body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_elif_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_elif_statement ::= IF LPAREN simple_exp RPAREN THEN statements elif_body ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_elif_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_statement ::= WHILE LPAREN simple_exp RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // forall_statement ::= FORALL LPAREN IDENTIFIER IN IDENTIFIER RPAREN DO statements OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forall_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // prim_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prim_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prim_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prim_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prim_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // agg_type ::= SEQ LT spec_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // agg_type ::= DICT LT spec_type COMMA spec_type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // spec_type ::= prim_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spec_type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // spec_type ::= agg_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spec_type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // spec_type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spec_type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUMBER ::= pos_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUMBER ::= MINUS pos_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pos_number ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_number",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pos_number ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_number",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pos_number ::= INTEGER_LITERAL UNDERSCORE INTEGER_LITERAL DIV INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_number",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pos_number ::= INTEGER_LITERAL DIV INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pos_number",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
